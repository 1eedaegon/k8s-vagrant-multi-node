# Box setup
BOX_IMAGE = ENV['BOX_IMAGE'] || 'centos/7'.freeze

i = ENV['NODE'].to_i || 1

# Disk setup
DISK_COUNT = ENV['DISK_COUNT'].to_i || 1
DISK_SIZE_GB = ENV['DISK_SIZE_GB'].to_i || 10
# Network
MASTER_IP = ENV['MASTER_IP'] || '192.168.26.10'.freeze
NODE_IP_NW = ENV['NODE_IP_NW'] || '192.168.26.'.freeze
NODE_IP = NODE_IP_NW + (i + 10).to_s

# Kubernetes and kubeadm
KUBERNETES_VERSION = ENV["KUBERNETES_VERSION"] || ''.freeze
KUBEADM_JOIN_FLAGS = ENV["KUBEADM_JOIN_FLAGS"] || ''.freeze

# Generate new using steps in README
KUBETOKEN = ENV['KUBETOKEN'] || 'b029ee.968a33e8d8e6bb0d'.freeze

$baseInstallScript = <<SCRIPT

set -x
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

if [ -n "#{KUBERNETES_VERSION}" ]; then
    KUBERNETES_PACKAGES="kubelet-#{KUBERNETES_VERSION} kubeadm-#{KUBERNETES_VERSION}"
else
    KUBERNETES_PACKAGES="kubelet kubeadm"
fi

yum install --nogpgcheck -y net-tools screen tree telnet docker rsync ${KUBERNETES_PACKAGES}
systemctl enable kubelet && systemctl start kubelet
systemctl enable docker && systemctl start docker

setenforce 0
sed -i 's/SELINUX=enforcing/SELINUX=enforcing/g' /etc/selinux/config
swapoff -a
sed -i '/swap/s/^/#/g' /etc/fstab
echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables
SCRIPT

$kubeMinionScript = <<SCRIPT

set -x
kubeadm reset
kubeadm join \
    #{KUBEADM_JOIN_FLAGS} \
    --discovery-token-unsafe-skip-ca-verification \
    --token "#{KUBETOKEN}" "#{MASTER_IP}:6443"
grep -q -- '--node-ip=' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf && \
    sed -ri -e 's/KUBELET_NETWORK_ARGS=--node-ip=[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+ /KUBELET_NETWORK_ARGS=/' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
sed -i 's/KUBELET_NETWORK_ARGS=/KUBELET_NETWORK_ARGS=--node-ip=#{NODE_IP} /' /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

systemctl daemon-reload
systemctl restart kubelet.service

SCRIPT

Vagrant.configure('2') do |config|
    config.vm.box = BOX_IMAGE
    config.vm.box_check_update = true

    config.vm.provider 'virtualbox' do |l|
        l.cpus = 1
        l.memory = '1024'
    end

    config.vm.define "node#{i}" do |subconfig|
        subconfig.vm.hostname = "node#{i}"
        subconfig.vm.network :private_network, ip: NODE_IP
        subconfig.vm.provider :virtualbox do |vb|
            # Storage configuration
            if File.exist?(".vagrant/node#{i}-disk-1.vdi")
                vb.customize ['storagectl', :id, '--name', 'SATAController', '--remove']
            end
            vb.customize ['storagectl', :id, '--name', 'SATAController', '--add', 'sata']
            (1..DISK_COUNT.to_i).each do |diskI|
                unless File.exist?(".vagrant/node#{i}-disk-#{diskI}.vdi")
                    vb.customize ['createhd', '--filename', ".vagrant/node#{i}-disk-#{diskI}.vdi", '--variant', 'Standard', '--size', DISK_SIZE_GB * 1024]
                end
                vb.customize ['storageattach', :id, '--storagectl', 'SATAController', '--port', diskI - 1, '--device', 0, '--type', 'hdd', '--medium', ".vagrant/node#{i}-disk-#{diskI}.vdi"]
            end
        end
        subconfig.vm.synced_folder "data/node#{i}/", '/data', type: 'rsync',
                                                              create: true, owner: 'root', group: 'root',
                                                              rsync__args: ["--rsync-path='sudo rsync'", '--archive', '--delete', '-z']
        # Provision
        subconfig.vm.provision :shell, inline: $baseInstallScript
        subconfig.vm.provision :shell, inline: $kubeMinionScript
    end
end
